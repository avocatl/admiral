// Code generated by MockGen. DO NOT EDIT.
// Source: display.go

// Package display is a generated GoMock package.
package display

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDisplayable is a mock of Displayable interface.
type MockDisplayable struct {
	ctrl     *gomock.Controller
	recorder *MockDisplayableMockRecorder
}

// MockDisplayableMockRecorder is the mock recorder for MockDisplayable.
type MockDisplayableMockRecorder struct {
	mock *MockDisplayable
}

// NewMockDisplayable creates a new mock instance.
func NewMockDisplayable(ctrl *gomock.Controller) *MockDisplayable {
	mock := &MockDisplayable{ctrl: ctrl}
	mock.recorder = &MockDisplayableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisplayable) EXPECT() *MockDisplayableMockRecorder {
	return m.recorder
}

// ColMap mocks base method.
func (m *MockDisplayable) ColMap() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColMap")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ColMap indicates an expected call of ColMap.
func (mr *MockDisplayableMockRecorder) ColMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColMap", reflect.TypeOf((*MockDisplayable)(nil).ColMap))
}

// Cols mocks base method.
func (m *MockDisplayable) Cols() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cols")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Cols indicates an expected call of Cols.
func (mr *MockDisplayableMockRecorder) Cols() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cols", reflect.TypeOf((*MockDisplayable)(nil).Cols))
}

// Filterable mocks base method.
func (m *MockDisplayable) Filterable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filterable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Filterable indicates an expected call of Filterable.
func (mr *MockDisplayableMockRecorder) Filterable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filterable", reflect.TypeOf((*MockDisplayable)(nil).Filterable))
}

// KV mocks base method.
func (m *MockDisplayable) KV() []map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KV")
	ret0, _ := ret[0].([]map[string]interface{})
	return ret0
}

// KV indicates an expected call of KV.
func (mr *MockDisplayableMockRecorder) KV() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KV", reflect.TypeOf((*MockDisplayable)(nil).KV))
}

// NoHeaders mocks base method.
func (m *MockDisplayable) NoHeaders() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoHeaders")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoHeaders indicates an expected call of NoHeaders.
func (mr *MockDisplayableMockRecorder) NoHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoHeaders", reflect.TypeOf((*MockDisplayable)(nil).NoHeaders))
}

// MockDisplayer is a mock of Displayer interface.
type MockDisplayer struct {
	ctrl     *gomock.Controller
	recorder *MockDisplayerMockRecorder
}

// MockDisplayerMockRecorder is the mock recorder for MockDisplayer.
type MockDisplayerMockRecorder struct {
	mock *MockDisplayer
}

// NewMockDisplayer creates a new mock instance.
func NewMockDisplayer(ctrl *gomock.Controller) *MockDisplayer {
	mock := &MockDisplayer{ctrl: ctrl}
	mock.recorder = &MockDisplayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisplayer) EXPECT() *MockDisplayerMockRecorder {
	return m.recorder
}

// Display mocks base method.
func (m *MockDisplayer) Display(arg0 Displayable, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Display", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Display indicates an expected call of Display.
func (mr *MockDisplayerMockRecorder) Display(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Display", reflect.TypeOf((*MockDisplayer)(nil).Display), arg0, arg1)
}

// DisplayMany mocks base method.
func (m *MockDisplayer) DisplayMany(arg0 []Displayable, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayMany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisplayMany indicates an expected call of DisplayMany.
func (mr *MockDisplayerMockRecorder) DisplayMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayMany", reflect.TypeOf((*MockDisplayer)(nil).DisplayMany), arg0, arg1)
}
